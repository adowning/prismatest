# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  accountID: String
  accountName: String
  acquisitionDate: Date
  address2: String
  alert: Boolean
  averageInvoice: Int
  city: String
  commercial: Boolean
  companyID: String
  companyName: String

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String
  firstName: String
  formatted_address: String
  id: ID!
  invoiceCount: Int
  lastEstimateCreatedDate: String
  lastInvoiceAmount: Int
  lastInvoiceDate: Date
  lastJobAmount: Int
  lastName: String
  lat: Int
  lng: Int
  phone1: String
  phone2: String
  phone3: String
  placeid: String
  searchAddress: String
  state: String
  taxExempt: Boolean
  taxID: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  zip: String
}

type AccountConnection {
  edges: [AccountEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccountEdge {
  cursor: String!
  node: Account!
}

input AccountOrder {
  direction: OrderDirection!
  field: AccountOrderField!
}

"""Properties by which account connections can be ordered."""
enum AccountOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Comment {
  author: User!
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  orderID: String!
  reference: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workorder: Workorder!
}

"""Date custom scalar type"""
scalar Date

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  login(data: LoginInput!): Auth!
  refreshToken(token: String!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type Query {
  account(accountId: String!): Account!
  activeWorkorders: [Workorder!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  post(postId: String!): Post!
  publishedAccounts(after: String, before: String, first: Int, last: Int, orderBy: AccountOrder, query: String, skip: Int): AccountConnection!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: WorkorderOrder, query: String, skip: Int): WorkorderConnection!
  publishedWorkorders(after: String, before: String, first: Int, last: Int, orderBy: WorkorderOrder, query: String, skip: Int): WorkorderConnection!
  userPosts(userId: String!): [Post!]!
  workorder(orderID: String!): Workorder!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  posts: [Post!]!
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Workorder {
  accountID: String!
  accountName: String!
  address1: String
  balanceDue: Int!
  callList: [String!]
  city: String
  comments: [Comment!]
  companyID: String!
  correction: Int!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: String!
  createdOn: Date!
  dateCreated: Date!
  discountPercent: Int!
  grandTotal: Int!
  id: ID!
  imported: Boolean!
  merchantFeesTotal: Int
  orderID: String!
  orderNumber: Int!
  orderType: String!
  originalType: String!
  postToAccounting: Boolean!
  salesRepID: String
  siteID: String!
  state: String
  subTotal: Int!
  taxID: String!
  taxRate: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userName: String!
  zip: Int
}

type WorkorderConnection {
  edges: [WorkorderEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type WorkorderEdge {
  cursor: String!
  node: Workorder!
}

input WorkorderOrder {
  direction: OrderDirection!
  field: WorkorderOrderField!
}

"""Properties by which workorder connections can be ordered."""
enum WorkorderOrderField {
  createdAt
  id
  updatedAt
}
